/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat;

import chat.client.ChatClient;
import chat.server.ChatServer;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Date;
import java.text.SimpleDateFormat;

/**
 *
 * @author Max
 */
public class ChatFrame extends javax.swing.JFrame {

    private static final String SERVER_ADDRESS = "192.168.21.110";
    private static final int SERVER_PORT = 5781;
    private static final int ClientSERVER_PORT = 5782;

    private ChatServer chatServer;
    Date date = new Date();
    SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy hh:mm");

    File path = new File("Logs");
    File lastfile = new File(path + File.separator + "last.txt");

    /**
     * Creates new form ChatFrame
     */
    public ChatFrame() {
        initComponents();
        jtaChatMessage.requestFocus();
        try {
            chatServer = new ChatServer(ClientSERVER_PORT);
            Thread thread = new Thread(chatServer);
            thread.start();

        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        setLocationRelativeTo(null);

        if (!path.exists()) {
            path.mkdir();
        }
        if (lastfile.exists()) {
            try {
                BufferedReader in = new BufferedReader(new FileReader(lastfile));
                String addLine;
                while ((addLine = in.readLine()) != null) {
                    jtaChatHistory.append(addLine);
                    jtaChatHistory.append("\n");
                }
            } catch (Exception e) {
                jlSaveLabel.setText("Cant read history file - " + e);
            }

        } else {
            jlSaveLabel.setText("No history log file");
        }
//        while (true) {            
//            if (!chatServer.messageFromServer.equals("")) {
//                jtaChatMessage.append(chatServer.messageFromServer);
//                chatServer.messageFromServer = "";
//            }
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtaChatHistory = new javax.swing.JTextArea();
        jtfIPadress = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaChatMessage = new javax.swing.JTextArea();
        jbSendMessage = new javax.swing.JButton();
        jlStatusMessage = new javax.swing.JLabel();
        jbSave = new javax.swing.JButton();
        jlSaveLabel = new javax.swing.JLabel();
        jbClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jtaChatHistory.setEditable(false);
        jtaChatHistory.setColumns(20);
        jtaChatHistory.setRows(14);
        jtaChatHistory.setFocusable(false);
        jScrollPane1.setViewportView(jtaChatHistory);

        jtfIPadress.setText("192.168.21.110");

        jLabel1.setText("IP Address:");

        jtaChatMessage.setColumns(20);
        jtaChatMessage.setRows(5);
        jScrollPane2.setViewportView(jtaChatMessage);

        jbSendMessage.setText("SEND");
        jbSendMessage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jbSendMessageFocusGained(evt);
            }
        });
        jbSendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSendMessageActionPerformed(evt);
            }
        });

        jlStatusMessage.setText(" ");

        jbSave.setText("SAVE");
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });

        jlSaveLabel.setText(" ");

        jbClear.setText("Clear");
        jbClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfIPadress, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlStatusMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlSaveLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbSendMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfIPadress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSendMessage)
                    .addComponent(jlStatusMessage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSave)
                    .addComponent(jlSaveLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbClear)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSendMessageActionPerformed

        String recipient = jtfIPadress.getText();
        String massage = jtaChatMessage.getText();

        if (massage.isEmpty()) {
            jlStatusMessage.setText("enter some message please before");
            return;
        }

        ChatClient chatClient = new ChatClient(SERVER_ADDRESS, SERVER_PORT);
        try {
            chatClient.sendMessage(recipient, massage);

            jtaChatHistory.append(recipient + " - (ME)" + '\n' + dateFormat.format(date) + '\n' + massage + '\n');

            for (int i = 0; i < 135; i++) {
                jtaChatHistory.append("-");
            }
            jtaChatHistory.append("\n");
//            jtaChatHistory.append(dateFormat.format(date) + '\n');
//            jtaChatHistory.append(massage + '\n');
            jtaChatMessage.setText(null);
        } catch (IOException ex) {
            jlStatusMessage.setText(ex.getMessage());
        }
    }//GEN-LAST:event_jbSendMessageActionPerformed

    private void jbSendMessageFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jbSendMessageFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jbSendMessageFocusGained

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        if (jtaChatHistory.getText().equals("")) {
            jlSaveLabel.setText("Nothing to Save");
        } else {
            File logf = new File(path + File.separator + jtfIPadress.getText() + ".txt");

            try {
                logf.createNewFile();
                lastfile.createNewFile();
                FileWriter fl = new FileWriter(logf, true);
                FileWriter fl2 = new FileWriter(lastfile);
                fl2.write(jtaChatHistory.getText());
                fl.write(jtaChatHistory.getText());
                fl.flush();
                fl2.flush();
                jlSaveLabel.setText("Saved");

            } catch (Exception e) {
                jlSaveLabel.setText("Error " + e);
            }

        }
    }//GEN-LAST:event_jbSaveActionPerformed

    private void jbClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbClearActionPerformed
        if (jtaChatHistory.getText().equals("")) {
            jlSaveLabel.setText("Nothing to Clear");
        } else {
            jtaChatHistory.setText("");
        }
    }//GEN-LAST:event_jbClearActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        try {

            if (!chatServer.messageFromServer.equals("")) {
                jtaChatHistory.append(chatServer.recipientFromServer + '\n' + dateFormat.format(date) + '\n' + chatServer.messageFromServer + '\n');
                chatServer.messageFromServer = "";
                for (int i = 0; i < 135; i++) {
                    jtaChatHistory.append("-");
                }
                jtaChatHistory.append("\n");
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_formMouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatFrame().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbClear;
    private javax.swing.JButton jbSave;
    private javax.swing.JButton jbSendMessage;
    private javax.swing.JLabel jlSaveLabel;
    private javax.swing.JLabel jlStatusMessage;
    private javax.swing.JTextArea jtaChatHistory;
    private javax.swing.JTextArea jtaChatMessage;
    private javax.swing.JTextField jtfIPadress;
    // End of variables declaration//GEN-END:variables
}
